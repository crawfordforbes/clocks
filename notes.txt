questions:

development:

stack?
react
version control?
git
production steps?
code review on push
testing?

pair programming?
possibility

day to day? standups?
pretty flexible

size of teams?
6 - 8 people




BUG:

Occasionally, none of the buttons would work once multiple clocks were running. I wasn't getting any errors in the console, so I had to methodically click on each button until I could identify what was causing the bug. It turns out that clicking the "start all clocks" button twice in a row without pausing in the main control panel was causing the bug. Because I couldn't be sure what state each clock was in when that button is pushed, I had to create a "playAll" method in the clock constructor, which originally looked like this:

`
this.playAll = function(){
		
		this.runningClock = setInterval(function(){this.increaseTime()}.bind(this), this.interval)
			document.getElementById("play_"+this.id).innerText = "PAUSE"
			document.getElementById("play_"+this.id).style.borderColor = "firebrick"
			document.getElementById("play_"+this.id).style.backgroundColor = "red"
		}
`
It was essentially the same as the play method, but without the ability to pause the clock if clicked while the setInterval function was running. However, if a clock was already running when that method was called, setInterval was being called repeatedly while already running; so I added an if statement to check if setInterval was already triggered, and if not, go ahead and start the clock:

`
this.playAll = function(){
	if(!this.runningClock){
		this.runningClock = setInterval(function(){this.increaseTime()}.bind(this), this.interval)
		document.getElementById("play_"+this.id).innerText = "PAUSE"
		document.getElementById("play_"+this.id).style.borderColor = "firebrick"
		document.getElementById("play_"+this.id).style.backgroundColor = "red"
	}
}
`
